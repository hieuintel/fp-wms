/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package scsi.agri;

import it.geosolutions.geoserver.rest.GeoServerRESTReader;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import static scsi.agri.Main.tablecounty;
import static scsi.agri.Publisher.RESTPW;
import static scsi.agri.Publisher.RESTURL;
import static scsi.agri.Publisher.RESTUSER;
import static scsi.agri.UpdateIndexTable.get_valueIndex;
import scsi.db.*;
import static scsi.db.Config.hostPG;
import static scsi.db.Config.portPG;
import static scsi.db.Config.userPG;
import static scsi.db.Config.pwPG;
import static scsi.db.Config.connectURLPG;
import static scsi.db.Core.run_SQL;

/**
 *
 * @author HieuIntel
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel9 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        tbhostGS = new javax.swing.JTextField();
        tbportGS = new javax.swing.JTextField();
        tbuserGS = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        tbpassGS = new javax.swing.JPasswordField();
        jLabel13 = new javax.swing.JLabel();
        bttestGSconnection = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tbhostPG = new javax.swing.JTextField();
        tbportPG = new javax.swing.JTextField();
        tbuserPG = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tbpassPG = new javax.swing.JPasswordField();
        jLabel8 = new javax.swing.JLabel();
        bttestPGconnection = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        cbstartyear = new javax.swing.JComboBox();
        jLabel19 = new javax.swing.JLabel();
        cbendyear = new javax.swing.JComboBox();
        cbregion = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btupdatemosaictable = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbupdatemosaicinfor = new javax.swing.JTextPane();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbgenerateXMLinfor = new javax.swing.JTextPane();
        jPanel10 = new javax.swing.JPanel();
        btgenerateXML = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        tbsaveXMLto = new javax.swing.JTextField();
        tbxmlsource = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        btsetsourceXML = new javax.swing.JButton();
        btsetdestinationXML = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        tbpathtoXML = new javax.swing.JTextField();
        btsetXMLdata = new javax.swing.JButton();
        btpublishLayer = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbPublishinfo = new javax.swing.JTextPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbcreateindexinfor = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabletype = new javax.swing.JTable();
        btgetlisttype = new javax.swing.JButton();
        btgetlistcounty = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        tablecounty = new javax.swing.JTable();
        btcreateindex = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        checkoverwriteindex = new javax.swing.JCheckBox();

        jButton2.setText("Run");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel7.setBackground(new java.awt.Color(204, 204, 204));

        jLabel9.setForeground(new java.awt.Color(0, 51, 204));
        jLabel9.setText("HOST");

        jLabel10.setForeground(new java.awt.Color(0, 51, 204));
        jLabel10.setText("PORT");

        tbhostGS.setText("165.132.139.249");

        tbportGS.setText("8080");

        tbuserGS.setText("admin");

        jLabel11.setForeground(new java.awt.Color(0, 51, 204));
        jLabel11.setText("USER");

        jLabel12.setForeground(new java.awt.Color(0, 51, 204));
        jLabel12.setText("PASS");

        tbpassGS.setText("geoserver");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("GeoServer Connection");

        bttestGSconnection.setText("Test");
        bttestGSconnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttestGSconnectionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bttestGSconnection)
                .addGap(105, 105, 105))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tbpassGS, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tbuserGS, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tbportGS, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tbhostGS, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel13)))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        jPanel7Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {tbhostGS, tbpassGS, tbportGS, tbuserGS});

        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(tbhostGS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(tbportGS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(tbuserGS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(tbpassGS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(bttestGSconnection)
                .addContainerGap())
        );

        tbhostGS.getAccessibleContext().setAccessibleName("tbhostGS");
        tbportGS.getAccessibleContext().setAccessibleName("tbportGS");
        tbuserGS.getAccessibleContext().setAccessibleName("tbuserGS");
        tbpassGS.getAccessibleContext().setAccessibleName("tbpassGS");

        jPanel6.setBackground(new java.awt.Color(204, 204, 204));

        jLabel4.setForeground(new java.awt.Color(0, 51, 204));
        jLabel4.setText("HOST");

        jLabel5.setForeground(new java.awt.Color(0, 51, 204));
        jLabel5.setText("PORT");

        tbhostPG.setText("165.132.139.131");

        tbportPG.setText("5432");

        tbuserPG.setText("postgres");

        jLabel6.setForeground(new java.awt.Color(0, 51, 204));
        jLabel6.setText("USER");

        jLabel7.setForeground(new java.awt.Color(0, 51, 204));
        jLabel7.setText("PASS");

        tbpassPG.setText("P@$$w0rd00");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("PostgreSQL Connection");

        bttestPGconnection.setText("Test");
        bttestPGconnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttestPGconnectionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bttestPGconnection)
                .addGap(102, 102, 102))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tbhostPG, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tbportPG, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tbuserPG, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tbpassPG, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel8)))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        jPanel6Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {tbhostPG, tbpassPG, tbportPG, tbuserPG});

        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tbhostPG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tbportPG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(tbuserPG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(tbpassPG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bttestPGconnection)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tbhostPG.getAccessibleContext().setAccessibleName("tbhostPG");
        tbportPG.getAccessibleContext().setAccessibleName("tblportPG");
        tbuserPG.getAccessibleContext().setAccessibleName("tbuserPG");
        tbpassPG.getAccessibleContext().setAccessibleName("tbpassPG");

        jPanel8.setBackground(new java.awt.Color(204, 204, 204));

        jLabel14.setText("Range");

        jLabel15.setText("Region");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel18.setText("Option");

        cbstartyear.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031", "2032", "2033", "2034", "2035", "2036", "2037", "2038", "2039", "2040", "2041", "2042", "2043", "2044", "2045", "2046", "2047", "2048", "2049", "2050" }));
        cbstartyear.setMinimumSize(new java.awt.Dimension(60, 20));
        cbstartyear.setPreferredSize(new java.awt.Dimension(60, 20));

        jLabel19.setText("to");

        cbendyear.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031", "2032", "2033", "2034", "2035", "2036", "2037", "2038", "2039", "2040", "2041", "2042", "2043", "2044", "2045", "2046", "2047", "2048", "2049", "2050" }));
        cbendyear.setSelectedIndex(14);
        cbendyear.setMinimumSize(new java.awt.Dimension(55, 20));
        cbendyear.setPreferredSize(new java.awt.Dimension(55, 20));

        cbregion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "china", "korea", "usa" }));
        cbregion.setSelectedIndex(1);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(cbstartyear, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbendyear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cbregion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel18)))
                .addGap(14, 14, 14))
        );

        jPanel8Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cbendyear, cbstartyear});

        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18)
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(cbstartyear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(cbendyear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(cbregion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(107, Short.MAX_VALUE))
        );

        jPanel8Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cbendyear, cbregion, cbstartyear});

        cbstartyear.getAccessibleContext().setAccessibleName("cbstartyear");
        cbendyear.getAccessibleContext().setAccessibleName("cbendyear");
        cbregion.getAccessibleContext().setAccessibleName("cbregion");

        jLabel21.setText("Power by SCSI Lab @ Yonsei University");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel21)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel9Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jPanel6, jPanel7, jPanel8});

        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 212, Short.MAX_VALUE)
                .addComponent(jLabel21)
                .addContainerGap())
        );

        jPanel9Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jPanel6, jPanel7, jPanel8});

        jTabbedPane1.addTab("Configuration", jPanel9);

        jLabel1.setForeground(new java.awt.Color(0, 51, 255));
        jLabel1.setText("Update Mosaic Table");

        btupdatemosaictable.setText("Run");
        btupdatemosaictable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btupdatemosaictableActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(tbupdatemosaicinfor);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btupdatemosaictable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 699, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btupdatemosaictable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Step 1", jPanel3);

        jLabel2.setForeground(new java.awt.Color(0, 0, 255));
        jLabel2.setText("Generate XML config file");

        jScrollPane3.setViewportView(tbgenerateXMLinfor);

        btgenerateXML.setText("Run");
        btgenerateXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btgenerateXMLActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btgenerateXML, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(btgenerateXML, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE))
        );

        jPanel11.setForeground(new java.awt.Color(204, 204, 204));

        jLabel16.setText("Source");

        jLabel17.setText("Save To");

        btsetsourceXML.setText("Choose");
        btsetsourceXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btsetsourceXMLActionPerformed(evt);
            }
        });

        btsetdestinationXML.setText("Choose");
        btsetdestinationXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btsetdestinationXMLActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tbsaveXMLto, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                    .addComponent(tbxmlsource))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btsetsourceXML)
                    .addComponent(btsetdestinationXML))
                .addContainerGap())
        );

        jPanel11Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel16, jLabel17});

        jPanel11Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {tbsaveXMLto, tbxmlsource});

        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(tbxmlsource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(btsetsourceXML))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btsetdestinationXML)
                    .addComponent(tbsaveXMLto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 164, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap())
            .addComponent(jScrollPane3)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jPanel10, jPanel11});

        jTabbedPane2.addTab("Step 2", jPanel4);

        jLabel3.setForeground(new java.awt.Color(0, 0, 255));
        jLabel3.setText("Publish GeoServer Layer");

        jLabel20.setText("Path to XML");

        btsetXMLdata.setText("Choose");
        btsetXMLdata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btsetXMLdataActionPerformed(evt);
            }
        });

        btpublishLayer.setText("Run");
        btpublishLayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btpublishLayerActionPerformed(evt);
            }
        });

        jScrollPane4.setViewportView(tbPublishinfo);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tbpathtoXML, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btsetXMLdata, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(btpublishLayer, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(88, 88, 88)
                .addComponent(jLabel3)
                .addContainerGap())
            .addComponent(jScrollPane4)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btpublishLayer)
                    .addComponent(btsetXMLdata)
                    .addComponent(tbpathtoXML, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Step 3", jPanel5);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 874, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );

        jTabbedPane2.getAccessibleContext().setAccessibleName("tabpublish");

        jTabbedPane1.addTab("Publish Layer", jPanel1);

        jScrollPane5.setViewportView(tbcreateindexinfor);

        tabletype.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "check", "id", "code", "name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabletype);

        btgetlisttype.setText("Get");
        btgetlisttype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btgetlisttypeActionPerformed(evt);
            }
        });

        btgetlistcounty.setText("Get");
        btgetlistcounty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btgetlistcountyActionPerformed(evt);
            }
        });

        tablecounty.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "check", "id_0", "id_1", "name_1"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tablecounty.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablecountyMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(tablecounty);

        btcreateindex.setText("Create Index");
        btcreateindex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btcreateindexActionPerformed(evt);
            }
        });

        jLabel22.setText("List of data");

        jLabel23.setText("List of county");

        jLabel24.setForeground(new java.awt.Color(0, 0, 255));
        jLabel24.setText("id_0: countryid;  id_1: countyid");

        checkoverwriteindex.setText("Overwrite");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(checkoverwriteindex)
                        .addGap(18, 18, 18)
                        .addComponent(btcreateindex))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(btgetlisttype)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel22))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(btgetlistcounty)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel24)))
                .addContainerGap(493, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addGap(392, 392, 392)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btgetlistcounty, btgetlisttype});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btgetlisttype)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btgetlistcounty)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btcreateindex, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkoverwriteindex))
                .addContainerGap())
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Create Index", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 879, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jTabbedPane1))
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("tabMain");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //test PG connection
    private void bttestPGconnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttestPGconnectionActionPerformed
        // TODO add your handling code here:
        hostPG = tbhostPG.getText();
        portPG = tbportPG.getText();
        userPG = tbuserPG.getText();
        pwPG = tbpassPG.getText();
        connectURLPG = "jdbc:postgresql://" + hostPG + ":" + portPG + "/";
        String connectURLPostgreSQL = Config.connectURLPG ;//+ "postgres";
        Connection conntest = Connect.getConnectPostgreSQL(connectURLPostgreSQL, Config.userPG, Config.pwPG);
        if (conntest != null) {
            JOptionPane.showMessageDialog(this, "Connect success!");
        } else {
            JOptionPane.showMessageDialog(this, "Could not connect to the Postgre host");
        }
    }//GEN-LAST:event_bttestPGconnectionActionPerformed

    //test geoserver connection
    private void bttestGSconnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttestGSconnectionActionPerformed
        RESTURL = "http://" + tbhostGS.getText() + ":" + tbportGS.getText() + "/geoserver";
        RESTUSER = tbuserGS.getText();
        RESTPW = tbpassGS.getText();
        try {
            // TODO add your handling code here:
            GeoServerRESTReader reader = new GeoServerRESTReader(RESTURL, RESTUSER, RESTPW);
            boolean check = reader.existGeoserver();
            if (check) {
                JOptionPane.showMessageDialog(this, "Connect success!");
            } else {
                JOptionPane.showMessageDialog(this, "Could not connect to the GeoServer host");
            }

        } catch (MalformedURLException ex) {
            JOptionPane.showMessageDialog(this, "Could not connect to the GeoServer host");
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bttestGSconnectionActionPerformed

    //update mosaic table
    private void btupdatemosaictableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btupdatemosaictableActionPerformed
        // TODO add your handling code here:
        Integer startyear = Integer.valueOf(cbstartyear.getSelectedItem().toString());
        Integer endyear = Integer.valueOf(cbendyear.getSelectedItem().toString());
        if (endyear < startyear) {
            JOptionPane.showMessageDialog(this, "Wrong range " + startyear + "-" + endyear);
        } else {
            tbupdatemosaicinfor.setText("");
            btupdatemosaictable.setEnabled(false);
            ThreadUpdateMosaicTable task1 = new ThreadUpdateMosaicTable("Update Mosaic Table Task1");
        }
    }//GEN-LAST:event_btupdatemosaictableActionPerformed

    //Form opened event
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        //btupdatemosaictable.setEnabled(false);
        // Get the size of the screen
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        // Determine the new location of the window
        int w = this.getSize().width;
        int h = this.getSize().height;
        int x = (dim.width - w) / 2;
        int y = (dim.height - h) / 2;
        // Move the window
        this.setLocation(x, y);
        this.setResizable(false);

        //tabletype.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tabletype.getColumnModel().getColumn(0).setPreferredWidth(50);
        tabletype.getColumnModel().getColumn(1).setPreferredWidth(50);
        tabletype.getColumnModel().getColumn(2).setPreferredWidth(50);
        tabletype.getColumnModel().getColumn(3).setPreferredWidth(200);

        tablecounty.getColumnModel().getColumn(0).setPreferredWidth(50);
        tablecounty.getColumnModel().getColumn(1).setPreferredWidth(50);
        tablecounty.getColumnModel().getColumn(2).setPreferredWidth(50);
        tablecounty.getColumnModel().getColumn(3).setPreferredWidth(200);

        tablecountycheclAll();
        tabletypecheclAll();
        DefaultTableModel model = (DefaultTableModel) tabletype.getModel();
        while (tabletype.getRowCount() > 0) {
            model.removeRow(0);
        }
        model = (DefaultTableModel) tablecounty.getModel();
        while (tablecounty.getRowCount() > 0) {
            model.removeRow(0);
        }

        appendToPane(Main.tbPublishinfo, "Please note that, after generation XML data, we have a folder named \"data\" " + "\n", Color.RED);
        appendToPane(Main.tbPublishinfo, "Please sure that, you copied the \"data\" folder to GeoServer folder before continute" + "\n", Color.RED);
        appendToPane(Main.tbPublishinfo, "Please refer to the help to know exactly how to copy the \"data\" folder" + "\n", Color.RED);
    }//GEN-LAST:event_formWindowOpened

    //set source XML - XML file template for generate xml configuration
    private void btsetsourceXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btsetsourceXMLActionPerformed
        // TODO add your handling code here:
        JFileChooser folderChooser = new JFileChooser();
        //fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        folderChooser.setDialogTitle("Select the folder containing XML template");
        folderChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = folderChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = folderChooser.getSelectedFile();
            boolean check = scsi.file.Core.check_existFile(selectedFile.getAbsolutePath() + "/imagemosaicjdbc.xml");
            if (check) {
                check = scsi.file.Core.check_existFile(selectedFile.getAbsolutePath() + "/connect.pgraster.xml.inc");
                if (check) {
                    check = scsi.file.Core.check_existFile(selectedFile.getAbsolutePath() + "/mapping.pgraster.xml.inc");
                    if (check) {
                        tbxmlsource.setText(selectedFile.getAbsolutePath());
                    } else {
                        JOptionPane.showMessageDialog(this, "Could not find mapping.pgraster.xml.inc file");
                        return;
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Could not find connect.pgraster.xml.inc file");
                    return;
                }
            } else {
                JOptionPane.showMessageDialog(this, "Could not find imagemosaicjdbc.xml file");
                return;
            }

        }
    }//GEN-LAST:event_btsetsourceXMLActionPerformed

    //set path to save XML configuration file
    private void btsetdestinationXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btsetdestinationXMLActionPerformed
        // TODO add your handling code here:
        JFileChooser folderChooser = new JFileChooser();
        //fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        folderChooser.setDialogTitle("Select the folder containing XML template");
        folderChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = folderChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = folderChooser.getSelectedFile();
            tbsaveXMLto.setText(selectedFile.getAbsolutePath());

        }
    }//GEN-LAST:event_btsetdestinationXMLActionPerformed

    private void btgenerateXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btgenerateXMLActionPerformed
        // TODO add your handling code here:
        String sourceXML = tbxmlsource.getText();
        String saveXMLto = "";
        boolean check = scsi.file.Core.check_existFile(sourceXML + "/imagemosaicjdbc.xml");
        if (check) {
            check = scsi.file.Core.check_existFile(sourceXML + "/connect.pgraster.xml.inc");
            if (check) {
                check = scsi.file.Core.check_existFile(sourceXML + "/mapping.pgraster.xml.inc");
                if (check) {
                    saveXMLto = tbsaveXMLto.getText();
                    if ("".equals(saveXMLto)) {
                        JOptionPane.showMessageDialog(this, "Please set folder to store XML file");
                    } else {
                        Integer startyear = Integer.valueOf(cbstartyear.getSelectedItem().toString());
                        Integer endyear = Integer.valueOf(cbendyear.getSelectedItem().toString());
                        if (endyear < startyear) {
                            JOptionPane.showMessageDialog(this, "Wrong range " + startyear + "-" + endyear);
                        } else {
                            tbgenerateXMLinfor.setText("");
                            btgenerateXML.setEnabled(false);
                            ThreadGenerateXML task1 = new ThreadGenerateXML("Generate XML Task1");
                        }
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Could not find mapping.pgraster.xml.inc file");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Could not find connect.pgraster.xml.inc file");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Could not find imagemosaicjdbc.xml file");
        }
    }//GEN-LAST:event_btgenerateXMLActionPerformed

    //set folder contained XML configuration file to publish layer
    private void btsetXMLdataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btsetXMLdataActionPerformed
        // TODO add your handling code here:
        JFileChooser folderChooser = new JFileChooser();
        //fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        folderChooser.setDialogTitle("Select the folder containing XML data for publish layer ");
        folderChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = folderChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = folderChooser.getSelectedFile();
            tbpathtoXML.setText(selectedFile.getAbsolutePath());

        }
    }//GEN-LAST:event_btsetXMLdataActionPerformed

    //publish layer follow XML file
    private void btpublishLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btpublishLayerActionPerformed
        // TODO add your handling code here:
        String pathtoXMLdata = tbpathtoXML.getText();
        if ("".equals(pathtoXMLdata)) {
            JOptionPane.showMessageDialog(this, "Could not find XML configuration data");
        } else {
            RESTURL = "http://" + tbhostGS.getText() + ":" + tbportGS.getText() + "/geoserver";
            RESTUSER = tbuserGS.getText();
            RESTPW = tbpassGS.getText();
            try {
                // TODO add your handling code here:
                GeoServerRESTReader reader = new GeoServerRESTReader(RESTURL, RESTUSER, RESTPW);
                boolean check = reader.existGeoserver();
                if (check) {
                    tbPublishinfo.setText("");
                    btpublishLayer.setEnabled(false);
                    ThreadPublishLayer task1 = new ThreadPublishLayer("Publish Layer Task1");
                } else {
                    JOptionPane.showMessageDialog(this, "Could not connect to the GeoServer host");
                }

            } catch (MalformedURLException ex) {
                JOptionPane.showMessageDialog(this, "Could not connect to the GeoServer host");
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_btpublishLayerActionPerformed

    //get list type of data we had
    private void btgetlisttypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btgetlisttypeActionPerformed
        // TODO add your handling code here:

        hostPG = tbhostPG.getText();
        portPG = tbportPG.getText();
        userPG = tbuserPG.getText();
        pwPG = tbpassPG.getText();
        connectURLPG = "jdbc:postgresql://" + hostPG + ":" + portPG + "/";
        String connectURLPostgreSQL = Config.connectURLPG + "db_Agri";
        Connection conn = Connect.getConnectPostgreSQL(connectURLPostgreSQL, Config.userPG, Config.pwPG);
        if (conn != null) {
            String sql = "select * from tbl_datatype order by id";
            ResultSet rescheck = run_SQL(conn, sql);
            try {
                DefaultTableModel model = (DefaultTableModel) tabletype.getModel();
                while (tabletype.getRowCount() > 0) {
                    model.removeRow(0);
                }
                while (rescheck.next()) {
                    Integer id = rescheck.getInt("id");
                    String code = rescheck.getString("code");
                    String name = rescheck.getString("name");
                    model.addRow(new Object[]{false, id, code, name});

                }
            } catch (SQLException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Could not connect to the Postgre host");
        }

    }//GEN-LAST:event_btgetlisttypeActionPerformed

    //get list county need to be create index
    private void btgetlistcountyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btgetlistcountyActionPerformed
        // TODO add your handling code here:
        hostPG = tbhostPG.getText();
        portPG = tbportPG.getText();
        userPG = tbuserPG.getText();
        pwPG = tbpassPG.getText();
        connectURLPG = "jdbc:postgresql://" + hostPG + ":" + portPG + "/";
        String connectURLPostgreSQL = Config.connectURLPG + "db_Agri";
        Connection conn = Connect.getConnectPostgreSQL(connectURLPostgreSQL, Config.userPG, Config.pwPG);
        String countryname = cbregion.getSelectedItem().toString();
        int id_0 = 213;
        if ("korea".equals(countryname)) {
            id_0 = 213;
        }
        if ("china".equals(countryname)) {
            id_0 = 49;
        }
        if ("usa".equals(countryname)) {
            id_0 = 244;
        }
        if (conn != null) {
            String sql = "select id_1,name_0,name_1 from tbl_province where id_0='" + id_0 + "' order by name_1";
            ResultSet rescheck = run_SQL(conn, sql);
            try {
                DefaultTableModel model = (DefaultTableModel) tablecounty.getModel();
                while (tablecounty.getRowCount() > 0) {
                    model.removeRow(0);
                }
                while (rescheck.next()) {
                    Integer id_1 = rescheck.getInt("id_1");
                    String name_1 = rescheck.getString("name_1");
                    model.addRow(new Object[]{false, id_0, id_1, name_1});
                }
            } catch (SQLException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Could not connect to the Postgre host");
        }
    }//GEN-LAST:event_btgetlistcountyActionPerformed

    //create index for table follow the parameter selected
    private void btcreateindexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btcreateindexActionPerformed
        // TODO add your handling code here:
        Integer startyear = Integer.valueOf(cbstartyear.getSelectedItem().toString());
        Integer endyear = Integer.valueOf(cbendyear.getSelectedItem().toString());
        if (endyear < startyear) {
            JOptionPane.showMessageDialog(this, "Wrong range " + startyear + "-" + endyear);
            return;
        } else {
            tbcreateindexinfor.setText("");
            List<String> listtype = new ArrayList<String>();
            List<Integer> listcounty = new ArrayList<Integer>();

            DefaultTableModel model = (DefaultTableModel) tabletype.getModel();
            int rowcount = model.getRowCount();
            for (int i = 0; i < rowcount; i++) {
                if ((boolean) model.getValueAt(i, 0)) {
                    listtype.add((String) model.getValueAt(i, 2));
                }
            }

            model = (DefaultTableModel) tablecounty.getModel();
            rowcount = model.getRowCount();
            for (int i = 0; i < rowcount; i++) {
                if ((boolean) model.getValueAt(i, 0)) {
                    listcounty.add((int) model.getValueAt(i, 2));
                }
            }

            if (listtype.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please choose at least one data type ");
                return;
            }

            if (listcounty.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please choose at least one county ");
                return;
            }

            tbcreateindexinfor.setText("");
            btcreateindex.setEnabled(false);
            ThreadCreateIndex task1 = new ThreadCreateIndex("Create Index Task1");
        }
    }//GEN-LAST:event_btcreateindexActionPerformed

    //test click even on table
    private void tablecountyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablecountyMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tablecountyMouseClicked

    //add function checked/unchecked all row
    public static void tablecountycheclAll() {
        tablecounty.getTableHeader().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                DefaultTableModel model = (DefaultTableModel) tablecounty.getModel();
                int col = tablecounty.columnAtPoint(e.getPoint());
                int check = 0;
                if (col == 0) {
                    int rowcount = model.getRowCount();
                    for (int i = 0; i < rowcount; i++) {
                        if ((boolean) model.getValueAt(i, 0)) {
                            check += 1;
                        }
                    }
                    if (check == rowcount) {
                        for (int i = 0; i < rowcount; i++) {
                            model.setValueAt(false, i, 0);
                        }
                    } else {
                        for (int i = 0; i < rowcount; i++) {
                            model.setValueAt(true, i, 0);
                        }
                    }
                }
                //String name = tablecounty.getColumnName(col);
                //System.out.println("Column index selected " + col + " " + name);
            }
        });
    }

    //add function checked/unchecked all row
    public static void tabletypecheclAll() {
        tabletype.getTableHeader().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                DefaultTableModel model = (DefaultTableModel) tabletype.getModel();
                int col = tabletype.columnAtPoint(e.getPoint());
                int check = 0;
                if (col == 0) {
                    int rowcount = model.getRowCount();
                    for (int i = 0; i < rowcount; i++) {
                        if ((boolean) model.getValueAt(i, 0)) {
                            check += 1;
                        }
                    }
                    if (check == rowcount) {
                        for (int i = 0; i < rowcount; i++) {
                            model.setValueAt(false, i, 0);
                        }
                    } else {
                        for (int i = 0; i < rowcount; i++) {
                            model.setValueAt(true, i, 0);
                        }
                    }
                }
                //String name = tablecounty.getColumnName(col);
                //System.out.println("Column index selected " + col + " " + name);
            }
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);

            }
        });
    }

    //get current time of system
    public static String getCurrentTimeStamp() {
        SimpleDateFormat sdfDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//dd/MM/yyyy
        Date now = new Date();
        String strDate = sdfDate.format(now);
        return strDate;
    }

    //thread update mosaic table
    public class ThreadUpdateMosaicTable implements Runnable {

        Thread _runner;

        public ThreadUpdateMosaicTable(String threadName) {
            _runner = new Thread(this, threadName);  //Tạo Thread mới            
            CreateThread();
        }

        private void CreateThread() {
            try {
                _runner.start();    //Bắt đầu thread mới                
            } catch (Exception e) {
                appendToPane(Main.tbupdatemosaicinfor, e.getMessage() + "\n", Color.RED);
            }
        }

        @Override
        public synchronized void run() {
            try {
                String region = cbregion.getSelectedItem().toString();
                Integer startyear = Integer.valueOf(cbstartyear.getSelectedItem().toString());
                Integer endyear = Integer.valueOf(cbendyear.getSelectedItem().toString());
                for (int y = startyear; y <= endyear; y++) {
                    try {
                        UpdateMosaicTable.update_MosaicTable(String.valueOf(y), region);
                    } catch (SQLException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                Main.btupdatemosaictable.setEnabled(true);
                appendToPane(Main.tbupdatemosaicinfor, "Complete..." + getCurrentTimeStamp() + "\n", Color.BLUE);
                Thread.sleep(0);
            } catch (InterruptedException e) {
                appendToPane(Main.tbupdatemosaicinfor, e.getMessage() + "\n", Color.RED);
            }
        }
    }

    //thread generate XML file
    public class ThreadGenerateXML implements Runnable {

        Thread _runner;

        public ThreadGenerateXML(String threadName) {
            _runner = new Thread(this, threadName);  //Tạo Thread mới            
            CreateThread();
        }

        private void CreateThread() {
            try {
                _runner.start();    //Bắt đầu thread mới                
            } catch (Exception e) {
                appendToPane(Main.tbgenerateXMLinfor, e.getMessage() + "\n", Color.RED);
            }
        }

        @Override
        public synchronized void run() {
            try {
                String region = cbregion.getSelectedItem().toString();
                Integer startyear = Integer.valueOf(cbstartyear.getSelectedItem().toString());
                Integer endyear = Integer.valueOf(cbendyear.getSelectedItem().toString());
                for (int y = startyear; y <= endyear; y++) {
                    try {
                        GenerateXMLConfig.render_imagemosaicjdbcxmlbyRegionUImode(String.valueOf(y), region, tbxmlsource.getText(), tbsaveXMLto.getText());
                    } catch (SQLException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                        appendToPane(tbgenerateXMLinfor, ex.getMessage() + "\n", Color.RED);
                    } catch (IOException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                        appendToPane(tbgenerateXMLinfor, ex.getMessage() + "\n", Color.RED);
                    }
                }
                Main.btgenerateXML.setEnabled(true);
                appendToPane(tbgenerateXMLinfor, "Complete..." + getCurrentTimeStamp() + "\n", Color.BLUE);
                Thread.sleep(0);
            } catch (InterruptedException e) {
                appendToPane(tbgenerateXMLinfor, e.getMessage() + "\n", Color.RED);
            }
        }
    }

    //thread publish layer
    public class ThreadPublishLayer implements Runnable {

        Thread _runner;

        public ThreadPublishLayer(String threadName) {
            _runner = new Thread(this, threadName);  //Tạo Thread mới            
            CreateThread();
        }

        private void CreateThread() {
            try {
                _runner.start();    //Bắt đầu thread mới                
            } catch (Exception e) {
                appendToPane(tbPublishinfo, e.getMessage() + "\n", Color.RED);
            }
        }

        @Override
        public synchronized void run() {
            try {

                try {
                    Publisher.publish_rasterLayerfromPostGISUImode(tbpathtoXML.getText());
                } catch (MalformedURLException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    appendToPane(tbPublishinfo, ex.getMessage() + "\n", Color.RED);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    appendToPane(tbPublishinfo, ex.getMessage() + "\n", Color.RED);
                }
                btpublishLayer.setEnabled(true);
                appendToPane(tbPublishinfo, "Complete..." + getCurrentTimeStamp() + "\n", Color.BLUE);
                Thread.sleep(0);
            } catch (InterruptedException e) {
                appendToPane(Main.tbgenerateXMLinfor, e.getMessage() + "\n", Color.RED);
            }
        }
    }

    //thread create index
    public class ThreadCreateIndex implements Runnable {

        Thread _runner;

        public ThreadCreateIndex(String threadName) {
            _runner = new Thread(this, threadName);  //Tạo Thread mới            
            CreateThread();
        }

        private void CreateThread() {
            try {
                _runner.start();    //Bắt đầu thread mới                
            } catch (Exception e) {
                appendToPane(tbcreateindexinfor, e.getMessage() + "\n", Color.RED);
            }
        }

        @Override
        public synchronized void run() {
            try {

                Integer startyear = Integer.valueOf(cbstartyear.getSelectedItem().toString());
                Integer endyear = Integer.valueOf(cbendyear.getSelectedItem().toString());
                Integer id_0 = 0;

                List<String> listtype = new ArrayList<>();
                List<Integer> listcounty = new ArrayList<>();

                DefaultTableModel model = (DefaultTableModel) tabletype.getModel();
                int rowcount = model.getRowCount();
                for (int i = 0; i < rowcount; i++) {
                    if ((boolean) model.getValueAt(i, 0)) {
                        listtype.add((String) model.getValueAt(i, 2));
                    }
                }

                model = (DefaultTableModel) tablecounty.getModel();
                rowcount = model.getRowCount();
                for (int i = 0; i < rowcount; i++) {
                    if ((boolean) model.getValueAt(i, 0)) {
                        listcounty.add((int) model.getValueAt(i, 2));
                        id_0 = (int) model.getValueAt(i, 1);
                    }
                }
                //Create index at here
                boolean overwrite = checkoverwriteindex.isSelected();
                for (int y = startyear; y <= endyear; y++) {
                    for (int id_1 : listcounty) {
                        for (String type : listtype) {
                            UpdateIndexTable.update_IndexbyYear(y, id_0, id_1, type, overwrite);
                        }
                    }
                }

                btcreateindex.setEnabled(true);
                appendToPane(tbcreateindexinfor, "Complete..." + getCurrentTimeStamp() + "\n", Color.BLUE);
                Thread.sleep(0);
            } catch (InterruptedException e) {
                appendToPane(Main.tbcreateindexinfor, e.getMessage() + "\n", Color.RED);
            } catch (ParseException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                appendToPane(Main.tbcreateindexinfor, ex.getMessage() + "\n", Color.RED);
            } catch (SQLException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                appendToPane(Main.tbcreateindexinfor, ex.getMessage() + "\n", Color.RED);
            }
        }
    }

    //append a text with style to a panel text
    public static void appendToPane(JTextPane tp, String msg, Color c) {
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
        aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

        int len = tp.getDocument().getLength();
        tp.setCaretPosition(len);
        tp.setCharacterAttributes(aset, false);
        tp.replaceSelection(msg);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btcreateindex;
    public static javax.swing.JButton btgenerateXML;
    public static javax.swing.JButton btgetlistcounty;
    public static javax.swing.JButton btgetlisttype;
    public javax.swing.JButton btpublishLayer;
    private javax.swing.JButton btsetXMLdata;
    private javax.swing.JButton btsetdestinationXML;
    private javax.swing.JButton btsetsourceXML;
    private javax.swing.JButton bttestGSconnection;
    private javax.swing.JButton bttestPGconnection;
    public static javax.swing.JButton btupdatemosaictable;
    public static javax.swing.JComboBox cbendyear;
    public static javax.swing.JComboBox cbregion;
    public static javax.swing.JComboBox cbstartyear;
    public static javax.swing.JCheckBox checkoverwriteindex;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    public static javax.swing.JTable tablecounty;
    public static javax.swing.JTable tabletype;
    public static javax.swing.JTextPane tbPublishinfo;
    public static javax.swing.JTextPane tbcreateindexinfor;
    public static javax.swing.JTextPane tbgenerateXMLinfor;
    public static javax.swing.JTextField tbhostGS;
    public static javax.swing.JTextField tbhostPG;
    public static javax.swing.JPasswordField tbpassGS;
    public static javax.swing.JPasswordField tbpassPG;
    public static javax.swing.JTextField tbpathtoXML;
    public static javax.swing.JTextField tbportGS;
    public static javax.swing.JTextField tbportPG;
    public static javax.swing.JTextField tbsaveXMLto;
    public static javax.swing.JTextPane tbupdatemosaicinfor;
    public static javax.swing.JTextField tbuserGS;
    public static javax.swing.JTextField tbuserPG;
    public static javax.swing.JTextField tbxmlsource;
    // End of variables declaration//GEN-END:variables
}
